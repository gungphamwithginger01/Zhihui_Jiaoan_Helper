import streamlit as st
import google.generativeai as genai
from docx import Document
import io

# --- 页面基础设置 ---
st.set_page_config(
    page_title="智慧教案小助手",
    page_icon="🤖",
    layout="wide"
)

st.title("🤖 智慧教案小助手")
st.caption("上传您的课程讲稿，AI为您一键生成教案初稿。")

# --- API Key配置 ---
# 为了安全，建议使用st.secrets管理API Key，但为方便本地运行，先用侧边栏输入
# 新代码
# --- API Key配置 ---
# 从Streamlit的Secrets中安全地读取API Key
try:
    api_key = st.secrets["GOOGLE_API_KEY"]
    genai.configure(api_key=api_key)
    st.sidebar.success("AI引擎已准备就绪！")
except:
    st.sidebar.error("请先在云端配置您的Google API密钥。")

# --- 核心功能函数 ---
def generate_lesson_plan(lecture_text, template_type, extra_info):
    """调用AI模型生成教案的核心函数（V2.0 - 精细化指令版）"""
    model = genai.GenerativeModel('gemini-1.5-flash') # 或者使用更高阶的 gemini-1.5-pro

    # --- 为不同模板构建极其详细的指令 ---

    if template_type == "理论教学":
        # 理论教学模板的“超级Prompt”
        template_prompt = f"""
你是一位顶级的教学设计师，任务是根据我提供的课程讲稿和辅助信息，严格遵循【理论教学模板】的结构和指令，生成一份专业、完整、格式规范的教案。

# **【输出格式总指令】**
- 严格按照以下标题、子标题和编号生成内容，不要创造新的标题或省略任何必需的标题。
- 教学目标下的三个子项，必须以分点形式（例如：1. xxx 2. xxx）呈现。
- 严格遵循每个环节的具体要求。

---
## **一、教学目标**
### **1. 素质目标：**
[此处分点生成，至少2点]
### **2. 知识目标：**
[此处分点生成，至少3点]
### **3. 能力目标：**
[此处分点生成，至少2点]

## **二、教学重点与难点**
### **1. 教学重点**
- **描述：** [此处填写对教学重点的描述]
- **解决措施：** [此处简略描述方法，如：案例法、图表法]
### **2. 教学难点**
- **描述：** [此处填写对教学难点的描述]
- **解决措施：** [此处简略描述方法，如：类比法、互动练习]

## **三、教学设备设施**
[此处填写所需的设备设施]

## **四、教学方法和手段**
[此处填写本课程所用的教学方法]

## **五、教学环节**
### **1. 复习旧课**
- **教师活动：** [设计教师的提问或活动]
- **学生活动：** [预设学生的回答或参与方式]
- **设计意图：** [阐述为何如此设计复习环节]

### **2. 导入新课**
[根据讲稿中导入部分的内容，提炼出关键知识点，并按以下六个维度进行详细设计]
- **导入内容/知识点：** [从讲稿中提取关键知识点]
- **教学方法：** [为该知识点推荐合适的教学方法]
- **教师活动：** [构思教师的具体活动]
- **学生活动：** [构思学生的具体活动]
- **设计意图：** [解释“为什么这么设计”]
- **思政融入：** [寻找并写入思政结合点]

### **3. 新课教学**
[根据讲稿主体，分模块/知识点进行设计。对每一个重要知识点，都遵循以下五元结构进行阐述]
#### **模块一：[知识点名称]**
- **教学方法：** [推荐方法]
- **教师活动：** [设计活动]
- **学生活动：** [设计活动]
- **设计意图：** [解释意图]
- **思政融入：** [写入思政点]
#### **模块二：[知识点名称]**
- **教学方法：** [推荐方法]
- **教师活动：** [设计活动]
- **学生活动：** [设计活动]
- **设计意图：** [解释意图]
- **思政融入：** [写入思政点]
[……根据讲稿内容继续生成更多模块]

### **4. 课堂小结**
[此处对本节课内容进行总结]

## **六、教学反思**
### **1. 教学效果：**
[预设本次教学可能达成的良好效果]
### **2. 不足与改进：**
[预设可能存在的不足之处，并提出具体的改进建议]
"""

    else: # 理实一体教学
        # 理实一体教学模板的“超级Prompt”
        template_prompt = f"""
你是一位顶级的教学设计师，任务是根据我提供的课程讲稿和辅助信息，严格遵循【理实一体教学模板】的结构和指令，生成一份专业、完整、格式规范的教案。

# **【输出格式总指令】**
- 严格按照以下标题、子标题和编号生成内容，不要创造新的标题或省略任何必需的标题。
- 教学目标下的三个子项，必须以分点形式（例如：1. xxx 2. xxx）呈现。
- 严格遵循每个环节的具体要求，特别是新课教学的“三段式”结构。

---
## **一、教学目标**
### **1. 素质目标：**
[此处分点生成，至少2点]
### **2. 知识目标：**
[此处分点生成，至少3点]
### **3. 能力目标：**
[此处分点生成，至少2点]

## **二、教学重点与难点**
### **1. 教学重点**
- **描述：** [此处填写对教学重点的描述]
- **解决措施：** [此处简略描述方法，如：案例法、图表法]
### **2. 教学难点**
- **描述：** [此处填写对教学难点的描述]
- **解决措施：** [此处简略描述方法，如：类比法、任务驱动法]

## **三、教学设备设施**
[此处填写所需的设备设施]

## **四、教学方法和手段**
[此处填写本课程所用的教学方法]

## **五、教学环节**
### **1. 组织教学**
[根据讲稿内容，识别并列出课前师生需要准备的物料、设备、软件、资料等]
- **教师准备：** [列出教师的准备项]
- **学生准备：** [列出学生的准备项]

### **2. 复习旧课**
[简要设计复习内容]

### **3. 导入新课**
[根据讲稿中导入部分的内容，按以下六个维度进行详细设计]
- **导入内容/案例：** [从讲稿中提取关键案例]
- **教学方法：** [为该案例推荐合适的教学方法]
- **教师活动：** [构思教师的具体活动]
- **学生活动：** [构思学生的具体活动]
- **设计意图：** [解释“为什么这么设计”]
- **思政融入：** [寻找并写入思政结合点]

### **4. 新课教学（三段式）**
#### **(一) 知识储备**
[此处提炼讲稿中的核心理论知识点]
#### **(二) 实操任务布置**
[根据知识储备，创造性地设计一个实操任务]
- **实操目标：** [明确本次实操要达成的具体目标]
- **实操步骤：** [用编号列出清晰、可执行的操作步骤]
- **教师活动：** [简述教师在任务布置阶段的活动]
- **学生活动：** [简述学生在任务布置阶段的活动]
#### **(三) 实操**
[详细描述实操过程中的师生活动，可以引用或设计评分表/记录表]
- **教师活动：** [详细描述教师的指导、监督、评分等活动]
- **学生活动：** [详细描述学生的分组、操作、记录等活动]

### **5. 课堂小结**
[此处对本节课的理论和实践环节进行总结]

## **六、教学反思**
### **1. 教学效果：**
[预设本次教学可能达成的良好效果]
### **2. 不足与改进：**
[预设可能存在的不足之处，并提出具体的改进建议]
"""

    # --- 最终组合并调用AI ---
    final_prompt = f"""
{template_prompt}

# **【原始材料】**
以下是本次课程的辅助信息和完整讲稿，请基于这些材料开始生成教案。

## **辅助信息:**
- **课程名称:** {extra_info['course_name']}
- **授课班级:** {extra_info['class_name']}
- **授课日期:** {extra_info['course_date']}

## **课程讲稿内容:**
---
{lecture_text}
---
"""

    try:
        response = model.generate_content(final_prompt)
        return response.text
    except Exception as e:
        return f"生成失败，发生错误：{e}"
# ==============================================================================
#                      【替换代码结束】
# ==============================================================================
# --- 主界面布局 ---
col1, col2 = st.columns(2)

with col1:
    st.header("1. 输入信息")
    
    template_choice = st.radio(
        "选择教案模板",
        ("理论教学", "理实一体教学"),
        horizontal=True
    )

    uploaded_file = st.file_uploader("上传课程讲稿 (.docx)", type=["docx"])

    st.subheader("辅助信息")
    course_name = st.text_input("课程名称")
    class_name = st.text_input("授课班级")
    course_date = st.date_input("授课日期")

    generate_button = st.button("✨ 一键生成教案", type="primary", use_container_width=True)

with col2:
    st.header("2. AI生成结果")
    
    if generate_button:
        if not api_key:
            st.error("请输入API密钥后再生成。")
        elif uploaded_file is not None:
            with st.spinner("AI正在奋笔疾书中，请稍候..."):
                # 读取Word文档内容
                doc = Document(uploaded_file)
                full_text = [para.text for para in doc.paragraphs]
                lecture_content = "\n".join(full_text)
                
                extra_info_dict = {
                    "course_name": course_name,
                    "class_name": class_name,
                    "course_date": str(course_date)
                }
                
                # 调用AI生成
                generated_plan = generate_lesson_plan(lecture_content, template_choice, extra_info_dict)
                
                st.text_area("教案初稿（可复制）", value=generated_plan, height=600)
        else:
            st.warning("请先上传您的课程讲稿。")

st.sidebar.markdown("---")
st.sidebar.info("本工具由Streamlit驱动，AI核心为Google Gemini。")
